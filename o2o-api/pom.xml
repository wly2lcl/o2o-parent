<?xml version="1.0"?>
<project 
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.parent.o2o</groupId>
    <artifactId>o2o-parent</artifactId>
    <version>1.0.0</version>
  </parent>
  <artifactId>o2o-api</artifactId>
  <packaging>jar</packaging>
  <name>${project.artifactId}</name>
  <url>http://maven.apache.org</url>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
		<!-- 日志系统logback -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>
		
		<!-- spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>	
		
		<!-- fastjson -->
		<dependency>
		    <groupId>com.alibaba</groupId>
		    <artifactId>fastjson</artifactId>
		    <version>${fastjson.version}</version>
		</dependency>
		
		<!-- kryo序列化 -->
		<dependency>
			<groupId>com.esotericsoftware</groupId>
			<artifactId>kryo</artifactId>
			<version>${kryo.version}</version>
		</dependency>
		<dependency>
			<groupId>de.javakaffee</groupId>
			<artifactId>kryo-serializers</artifactId>
			<version>${kryo.serializers.version}</version>
		</dependency>
		
		<!-- c3p0连接池 -->
		<dependency>
			<groupId>c3p0</groupId>
			<artifactId>c3p0</artifactId>
			<version>${c3p0.version}</version>
		</dependency>
		<!-- aspectj -->
		<dependency>
			<groupId>aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectj.version}</version>
			<scope>compile</scope>
		</dependency>
    			
    	<!-- JBoss RestEasy -->
		<dependency>
		    <groupId>org.jboss.resteasy</groupId>
		    <artifactId>resteasy-jaxrs</artifactId>
		    <version>3.0.10.Final</version>
		</dependency>
		<dependency>
		    <groupId>org.jboss.resteasy</groupId>
		    <artifactId>resteasy-client</artifactId>
		    <version>3.0.10.Final</version>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jackson2-provider</artifactId>
			<version>3.0.10.Final</version>
		</dependency>
		<dependency>
		    <groupId>javax.validation</groupId>
		    <artifactId>validation-api</artifactId>
		    <version>1.1.0.Final</version>
		</dependency>
		<!-- 阿里巴巴druid数据源的jar包依赖 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.0.18</version>
		</dependency>
		<dependency>
			<groupId>org.apache.curator</groupId>
			<artifactId>curator-framework</artifactId>
			<version>${curator.version}</version>
		</dependency>
		<!-- mysql驱动jar包 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.version}</version>
		</dependency>
		<!-- tomcat server -->
		<dependency>
		    <groupId>org.apache.tomcat.embed</groupId>
		    <artifactId>tomcat-embed-core</artifactId>
		    <version>8.0.11</version>
		</dependency>
		<dependency>
		    <groupId>org.apache.tomcat.embed</groupId>
		    <artifactId>tomcat-embed-logging-juli</artifactId>
		    <version>8.0.11</version>
		</dependency>
		<!-- o2o-api-rpc -->
		<dependency>
			<groupId>com.parent.o2o</groupId>
			<artifactId>o2o-api-rpc</artifactId>
			<version>${com.parent.o2o.api.rpc.version}</version>
		</dependency>
		<!-- o2o-dao -->
		<dependency>
			<groupId>com.parent.o2o</groupId>
			<artifactId>o2o-dao</artifactId>
			<version>${com.parent.o2o.dao.version}</version>
		</dependency>
  </dependencies>
  <build>
		<finalName>${project.artifactId}</finalName>
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>META-INF/*</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>

			<!-- 打包jar文件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
						</manifest>
					</archive>
				</configuration>
				<executions>
					<!-- 打包主服务 -->
					<execution>
						<id>${project.artifactId}</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/build/${artifactId}/bin</outputDirectory>
							<includes>
								<include>com/python/comm/**</include>
								<include>**/*.xml</include>
								<include>**/*.properties</include>
							</includes>
							<excludes>
								<exclude>**/*.bat</exclude>
								<exclude>**/*.sh</exclude>
								<exclude>**/redisclient.xml</exclude>
								<exclude>**/redisson-conf.json</exclude>
							</excludes>
						</configuration>
					</execution>
					<!-- docker  strart-->
					<execution>
						<id>${project.artifactId}-docker</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/build/msr/bin</outputDirectory>
							<includes>
								<include>com/python/comm/**</include>
								<include>**/*.xml</include>
								<include>**/*.properties</include>
							</includes>
							<excludes>
								<exclude>**/*.bat</exclude>
								<exclude>**/*.sh</exclude>
								<exclude>**/redisclient.xml</exclude>
								<exclude>**/redisson-conf.json</exclude>
							</excludes>
						</configuration>
					</execution>
					<!-- docker  end-->
				</executions>
			</plugin>


			<!-- 拷贝项目结构文件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<!-- 加入空目录 -->
				<configuration>
					<includeEmptyDirs>true</includeEmptyDirs>
				</configuration>
				<executions>
					<!-- 复制build文件夹 -->
					<execution>
						<id>copy-build</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<includeEmptyDirs>true</includeEmptyDirs>
							<encoding>UTF-8</encoding>
							<outputDirectory>${project.build.directory}/build/${artifactId}</outputDirectory>
							<!--把配置文件拷到和jar包同一个路径下 -->
							<resources>
								<resource>
									<directory>src/main/build/</directory>
									<includes>
										<include>**/*</include>
									</includes>
									<excludes>
										<exclude>bin/Dockerfile</exclude>
									</excludes>									
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<!-- 复制resources文件夹 -->
					<execution>
						<id>copy-resources</id>
						<phase>compile</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<includeEmptyDirs>true</includeEmptyDirs>
							<encoding>UTF-8</encoding>
							<outputDirectory>${project.build.directory}/build/${artifactId}/conf</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources/</directory>
									<includes>
										<include>**/*</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<!-- 复制maven定义配置文件,解决Eclipse自己编译的配置文件不会替换配置参数问题 -->
					<execution>
						<id>copy-classes</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<includeEmptyDirs>true</includeEmptyDirs>
							<encoding>UTF-8</encoding>
							<outputDirectory>${project.build.directory}/classes</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources/</directory>
									<includes>
										<include>**/*</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<!-- 复制test配置文件,解决Eclipse自己编译的配置文件不会替换配置参数问题 -->
					<execution>
						<id>copy-test</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<includeEmptyDirs>true</includeEmptyDirs>
							<encoding>UTF-8</encoding>
							<outputDirectory>${project.build.directory}/test-classes</outputDirectory>
							<resources>
								<resource>
									<directory>src/test/resources/</directory>
									<includes>
										<include>**/*</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<!-- docker  strart-->
					<execution>
						<id>copy-build-docker</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<includeEmptyDirs>true</includeEmptyDirs>
							<encoding>UTF-8</encoding>
							<outputDirectory>${project.build.directory}/build/msr</outputDirectory>
							<!--把配置文件拷到和jar包同一个路径下 -->
							<resources>
								<resource>
									<directory>src/main/build/</directory>
									<includes>
										<include>**/*</include>
									</includes>
									<excludes>
										<exclude>bin/Dockerfile</exclude>
									</excludes>									
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>					
					<!-- 复制Dockerfile -->
					<execution>
						<id>copy-dockerfile</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<includeEmptyDirs>true</includeEmptyDirs>
							<encoding>UTF-8</encoding>
							<outputDirectory>${project.build.directory}/build</outputDirectory>
							<!--把配置文件拷到和jar包同一个路径下 -->
							<resources>
								<resource>
									<directory>src/main/build/bin/</directory>
									<includes>
										<include>Dockerfile</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<!-- 复制resources文件夹 -->
					<execution>
						<id>copy-resources-docker</id>
						<phase>compile</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<includeEmptyDirs>true</includeEmptyDirs>
							<encoding>UTF-8</encoding>
							<outputDirectory>${project.build.directory}/build/msr/conf</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources/</directory>
									<includes>
										<include>**/*</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>	
					<!-- docker  end-->				
				</executions>
			</plugin>

			<!-- 拷贝依赖的jar包到lib目录 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>
								${project.build.directory}/build/${artifactId}/lib
							</outputDirectory>
						</configuration>
					</execution>
					<!-- docker  start-->	
					<execution>
						<id>copy-docker</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>
								${project.build.directory}/build/msr/lib
							</outputDirectory>
						</configuration>
					</execution>
					<!-- docker  end-->	
				</executions>
			</plugin>
			<!-- 此模块不提交至maven仓库 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.8.2</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
